name: ontology CI
on:
  workflow_dispatch:

jobs:
  build:
    env:
      ONTO_FILE: testo.ttl
      ONTO_ABBREV: testo
      DOCS_DIR: docs
      GIST_ID: ${{ vars.GIST_ID }}

    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
  
    - name: Set up Java (for ROBOT/HermiT)
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '17'
  
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
  
    - name: Install tooling (ROBOT, HermiT, Pylode, RDFLib)
      run: |
        python -m pip install --upgrade pip
        pip install rdflib dotenv pylode
        wget -q https://github.com/ontodev/robot/releases/download/v1.9.8/robot.jar -O robot.jar
        curl -sL https://raw.githubusercontent.com/ontodev/robot/master/bin/robot > robot
        chmod +x robot
     
    - name: Validate ontology profile
      id: profile
      run: |
        # If parsing fails, this step will exit non-zero
        ./robot validate-profile --input "$ONTO_FILE" --profile DL|| \
        (echo "Profile check failed." && exit 1)
  
    - name: Badge — Syntax
      if: always()
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_TOKEN }}
        gistID: ${{ env.GIST_ID }}
        filename: ontology-ci-profile.json
        label: OWL DL Profile
        message: ${{ steps.profile.outcome }}
        color: ${{ steps.profile.outcome == 'success' && 'brightgreen' || steps.profile.outcome == 'cancelled' && 'yellow' || 'red' }}
  
    - name: Reasoning and consistency check (HermiT)
      id: reason
      run: |
       ./robot reason --reasoner HermiT --input "$ONTO_FILE" --output reasoned.owl \
        > reason.stdout 2> reason.stderr \
        && echo "REASON_RESULT=consistent" >> $GITHUB_ENV \
        || echo "REASON_RESULT=inconstent" >> $GITHUB_ENV

    - name: Upload reasoning logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: reasoning-logs
        path: |
          reason.stdout
          reason.stderr
          reason.summary
          
    - name: Badge — Reason
      if: always()
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_TOKEN }}
        gistID: ${{ env.GIST_ID }}
        filename: ontology-ci-reason.json
        label: Reasoning
        message: ${{ env.REASON_RESULT }}
        color: ${{ env.REASON_RESULT == 'consistent' && 'brightgreen' || 'red' }}
        
    - name: Bump version (owl:versionInfo, owl:versionIRI, dcterms:modified, owl:priorVersion, owl:backwardsCompatibleWith) and write new file
      id: bump_version
      run: |
        python scripts/bump_version.py

    - name: Badge — Version update
      if: always()
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_TOKEN }}
        gistID: ${{ env.GIST_ID }}
        filename: ontology-ci-version.json
        label: Version
        message: ${{ env.NEW_VERSION }}
        color: ${{ steps.bump_version.outcome == 'success' && 'brightgreen' || 'red' }}

    - name: Commit bumped ontology back to main in both root and version directory (skip CI)
      id: commit
      run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$ONTO_FILE" 
          git add "${{ env.NEW_FILE }}"
          git commit -m "chore(ontology): bump version to ${{ env.NEW_VERSION }} [skip ci]" || echo "Nothing to commit."
          git push

    - name: Checkout Forked Ontospy
      uses: actions/checkout@v3
      with:
          repository: micheldumontier/Ontospy
          path: './ontospy'

    - name: Install Forked Ontospy
      run: |
         python -m pip install --upgrade pip
         cd ./ontospy 
         pip install -r requirements.txt
         pip install -e .
         cd ..
         
    - name: Generate documentation with Ontospy
      id: ontospy
      run: |
          mkdir -p "$DOCS_DIR/docs/ontospy"
          python -m ontospy.cli gendocs --type 2 \
            -o "$DOCS_DIR/docs/ontospy" \
            "${{ env.NEW_FILE }}"


    - name: Badge — Ontospy
      if: always()
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_TOKEN }}
        gistID: ${{ env.GIST_ID }}
        filename: ontology-ci-ontospy.json
        label: ontospy
        message: ${{ steps.ontospy.outcome }}
        color: ${{ steps.ontospy.outcome == 'success' && 'brightgreen' || steps.ontospy.outcome == 'cancelled' && 'yellow' || 'red' }}

    - name: Generate static site with Pylode
      id: pylode
      run: |
          mkdir -p "$DOCS_DIR/docs/pylode/"
          pylode -o "$DOCS_DIR/docs/pylode/index" \
            "${{ env.NEW_FILE }}"

    - name: Badge — Pylode
      if: always()
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_TOKEN }}
        gistID: ${{ env.GIST_ID }}
        filename: ontology-ci-pylode.json
        label: pylode
        message: ${{ steps.pylode.outcome }}
        color: ${{ steps.pylode.outcome == 'success' && 'brightgreen' || steps.pylode.outcome == 'cancelled' && 'yellow' || 'red' }}

    - name: Configure Pages
      uses: actions/configure-pages@v5

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ${{ env.DOCS_DIR }}
        
  deploy:
    runs-on: ubuntu-latest
    needs: build

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    env:
      GIST_ID: ${{ vars.GIST_ID }}
      
    steps: 
        - name: Deploy to GitHub Pages
          uses: actions/deploy-pages@v4
          id: deployment
          with:
              preview: false 
        
        - name: Badge — Deploy (Shields endpoint)
          if: always()
          uses: schneegans/dynamic-badges-action@v1.7.0
          with:
            auth: ${{ secrets.GIST_TOKEN }}
            gistID: ${{ env.GIST_ID }}
            filename: ontology-ci-deploy.json
            label: deploy
            message: ${{ steps.deployment.outcome }}
            color: ${{ steps.deployment.outcome == 'success' && 'brightgreen' || steps.deployment.outcome == 'cancelled' && 'yellow' || 'red' }}

  foops:
    runs-on: ubuntu-latest
    needs: deploy
    env:
      #ONTO_URI: https://w3id.org/testo/
      ONTO_URI: https://raw.githubusercontent.com/micheldumontier/ontostart/refs/heads/main/versions/0.0.13/testo.ttl
      GIST_ID: ${{ vars.GIST_ID }}
    
    steps:
      - name: Call FOOPS! API
        run: |
          curl -X POST "https://foops.linkeddata.es/assessOntology" \
              -H  "accept: application/json" \
              -H "Content-Type: application/json" \
              -d "{  \"ontologyUri\": \"$ONTO_URI\"}" \
              -o foops-results.json

      - name: Upload foops results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: foops-results
          path: foops-results.json
          
      - name: Process FOOPS! results
        run: |
          python3 - << 'PY'
          import json, pathlib, os
          d=json.load(open("foops-results.json"))
          tot=sum(c["total_tests_run"] for c in d["checks"])
          pas=sum(c["total_passed_tests"] for c in d["checks"])
          pct = (pas / tot * 100) if tot else 0
          label = f"{pct:.0f}% ({pas}/{tot} tests)"
         
          with open(os.environ["GITHUB_ENV"], "a") as f:
            f.write(f"FOOPS_SCORE={label}\n")  
          PY
          
      - name: Badge — FOOPS
        if: always()
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: ${{ env.GIST_ID }}
          filename: ontology-ci-foops.json
          label: FOOPS!
          message: ${{ env.FOOPS_SCORE }}
          color: ${{ steps.foops.outcome == 'success' && 'brightgreen' || steps.foops.outcome == 'cancelled' && 'yellow' || 'red' }}

