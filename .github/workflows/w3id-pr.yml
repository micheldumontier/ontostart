name: Propose w3id.org redirects

on:
  workflow_dispatch:
    inputs:
      W3ID_FOLDER:
        description: "Single word directory name to create in w3id.org (e.g., 'ontostart')"
        required: true
        default: "ontostart"
      SOURCE_HTACCESS_PATH:
        description: "Path in this repo to the .htaccess to copy"
        required: true
        default: "apache/web/.htaccess"
      SOURCE_README_PATH:
        description: "Path in this repo to the README.md file to copy"
        required: true
        default: "apache/web/README.md"        
      W3ID_FORK_OWNER:
        description: "Organization to own the fork (leave empty to fork under your user)"
        required: false
        default: ""

permissions:
  contents: write
  pull-requests: write

env:
  W3ID_UPSTREAM_REPO: perma-id/w3id.org

jobs:
  make-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Check out this repository
        uses: actions/checkout@v4

      # gh is preinstalled on ubuntu-latest, but this keeps the job portable
      - name: Ensure GitHub CLI is available
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y gh
          fi
          gh --version

      - name: Authenticate gh for API and Git
        run: |
          echo "${{ secrets.W3ID_TOKEN }}" | gh auth login --with-token
          gh auth status
          gh auth setup-git
          git config --global user.name  "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Capture inputs
        run: |
          echo "W3ID_FOLDER=${{ inputs.W3ID_FOLDER }}"          >> "$GITHUB_ENV"
          echo "SOURCE_HTACCESS_PATH=${{ inputs.SOURCE_HTACCESS_PATH }}" >> "$GITHUB_ENV"
          echo "SOURCE_README_PATH=${{ inputs.SOURCE_README_PATH }}" >> "$GITHUB_ENV"
          echo "REQ_OWNER=${{ inputs.W3ID_FORK_OWNER }}"         >> "$GITHUB_ENV"

      - name: Determine upstream default branch
        run: |
          BASE_BRANCH="$(gh api repos/${{ env.W3ID_UPSTREAM_REPO }} -q .default_branch)"
          echo "BASE_BRANCH=${BASE_BRANCH}" | tee -a "$GITHUB_ENV"

      - name: Decide fork target (org vs user)
        run: |
          FORK_OWNER="${GITHUB_ACTOR}"
          TARGET_IS_ORG="false"
          if [ -n "${REQ_OWNER}" ]; then
            TYPE="$(gh api users/${REQ_OWNER} -q .type || echo unknown)"
            if [ "${TYPE}" = "Organization" ]; then
              FORK_OWNER="${REQ_OWNER}"
              TARGET_IS_ORG="true"
              echo "Fork will be created under org '${FORK_OWNER}'."
            else
              echo "Input '${REQ_OWNER}' is not an Organization (type=${TYPE}); forking under user '${GITHUB_ACTOR}'."
            fi
          else
            echo "No org provided; forking under user '${GITHUB_ACTOR}'."
          fi
          echo "FORK_OWNER=${FORK_OWNER}"       >> "$GITHUB_ENV"
          echo "TARGET_IS_ORG=${TARGET_IS_ORG}" >> "$GITHUB_ENV"

      - name: Fork upstream (idempotent)
        run: |
          if [ "${TARGET_IS_ORG}" = "true" ]; then
            gh repo fork "${{ env.W3ID_UPSTREAM_REPO }}" --org "${FORK_OWNER}" --remote=false || true
          else
            gh repo fork "${{ env.W3ID_UPSTREAM_REPO }}" --remote=false || true
          fi

      - name: Compute fork fullname and clone
        run: |
          FORK_FULLNAME="${FORK_OWNER}/$(basename '${{ env.W3ID_UPSTREAM_REPO }}')"
          echo "FORK_FULLNAME=${FORK_FULLNAME}" >> "$GITHUB_ENV"

          # Wait for fork to exist (first run) then clone
          for i in {1..10}; do
            if git ls-remote "https://github.com/${FORK_FULLNAME}.git" &>/dev/null; then
              break
            fi
            echo "Waiting for fork to be ready (${i}/10)..."
            sleep 3
          done

          git clone "https://github.com/${FORK_FULLNAME}.git"
          echo "CLONED_DIR=$(basename '${{ env.W3ID_UPSTREAM_REPO }}')" >> "$GITHUB_ENV"

      - name: Create branch and copy .htaccess AND README.md
        run: |
          cd "${CLONED_DIR}"
          BRANCH="add-${W3ID_FOLDER}-$(date +%Y%m%d%H%M%S)"
          echo "BRANCH=${BRANCH}" >> "$GITHUB_ENV"

          mkdir -p "${W3ID_FOLDER}"
          if [ ! -f "${GITHUB_WORKSPACE}/${SOURCE_HTACCESS_PATH}" ]; then
            echo "Source ${SOURCE_HTACCESS_PATH} not found." >&2
            exit 1
          fi

          cp "${GITHUB_WORKSPACE}/${SOURCE_HTACCESS_PATH}" "${W3ID_FOLDER}/.htaccess"
          cp "${GITHUB_WORKSPACE}/${SOURCE_README_PATH}" "${W3ID_FOLDER}/README.md"
          
          git checkout -b "${BRANCH}"
          git add "${W3ID_FOLDER}/.htaccess" "${W3ID_FOLDER}/README.md" || true
          
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Adding ${W3ID_FOLDER} .htaccess and/or README.md"
          else
            echo "No changes to commit; proceeding without commit."
          fi

      - name: Push branch to fork
        run: |
          cd "${CLONED_DIR}"
          git remote add fork "https://github.com/${FORK_FULLNAME}.git" || git remote set-url fork "https://github.com/${FORK_FULLNAME}.git"
          # Push even if there were no new commits (creates branch if needed)
          git push -u fork "${BRANCH}"

      - name: Open/Reuse Pull Request to upstream
        run: |
          set -e
          # Try to create the PR; if it already exists, just show it
          if gh pr create \
              --repo "${{ env.W3ID_UPSTREAM_REPO }}" \
              --head "${FORK_OWNER}:${BRANCH}" \
              --base "${BASE_BRANCH}" \
              --title "Add ${W3ID_FOLDER} redirects" \
              --body "This PR adds \`${W3ID_FOLDER}/.htaccess\` with redirects for the \`${W3ID_FOLDER}\` namespace."; then
            echo "PR created."
          else
            echo "PR may already exist; showing matching PRs..."
          fi
          gh pr list --repo "${{ env.W3ID_UPSTREAM_REPO }}" --search "${BRANCH}" --state open --limit 1
          # Print the URL of the PR (new or existing)
          gh pr view --repo "${{ env.W3ID_UPSTREAM_REPO }}" --json url -q .url || true
