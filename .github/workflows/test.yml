name: test
on:
  workflow_dispatch:

jobs:
  build:
    env:
      ONTO_FILE: testo.ttl
      ONTO_ABBREV: testo
      VERSION_DIR: versions
      NEW_VERSION: 0.0.2
      GIST_ID: ${{ vars.GIST_ID }}

    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
  
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
  
    - name: Install tooling
      run: |
        python -m pip install --upgrade pip
        pip install rdflib dotenv
     
    - name: Generate syntax variants
      id: profile
      run: |
          python3 - << 'PY'
          import os
          from rdflib import Graph

          target_dir=f"${{env.VERSION_DIR}}/${{env.NEW_VERSION}}"
          ttl_file = f"{target_dir}/${{env.ONTO_ABREV}}.ttl"
          onto_file = "testo.ttl"
          g = Graph()
          g.parse(onto_file)
          target_fmts = [
              ("jsonld", "json-ld"),
              ("nt", "nt"),
              ("owl", "xml")
          ]
          files = set()
          #files.add(src_file)

          for fmt in target_fmts:
              target_file = f"{target_dir}/${{env.ONTO_ABBREV}}.{fmt[0]}"
              print(f"Creating {target_file}")
              g.serialize(destination=target_file, format=fmt[1], encoding="utf-8")
              files.add(target_file)
         
          with open(os.environ["GITHUB_ENV"], "a") as f:
              f.write("NEW_FILES=" + " ".join(files) + "\n")
          PY
    - name: Commit files (skip CI)
      id: commit
      run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$ONTO_FILE" ${{ env.NEW_FILES }}
          git commit -m "chore(ontology): bump version to ${{ env.NEW_VERSION }} [skip ci]" || echo "Nothing to commit."
          git push
          
